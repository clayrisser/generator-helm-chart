{{- if .Values.config.redis.internal }}
apiVersion: kubedb.com/v1alpha1
kind: Redis
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-redis
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-redis
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  version: {{ .Values.config.redis.version | quote }}
  configSource:
    configMap:
      name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-redis
  {{- if .Values.config.redis.prometheus }}
  monitor:
    agent: prometheus.io/builtin
  {{- end }}
  {{- if (or (gt (.Values.config.redis.shards | int64) 1) (gt (.Values.config.redis.shards | int64) 1)) }}
  mode: Cluster
  cluster:
    master: {{ .Values.config.redis.shards }}
    replicas: {{ .Values.config.redis.replicas }}
  {{- else }}
  mode: Standalone
  {{- end }}
  {{- if .Values.persistence.enabled }}
  storageType: Durable
  storage:
    {{- if .Values.persistence.storageClass }}
    {{- if (eq "-" .Values.persistence.storageClass) }}
    storageClassName: ''
    {{- else }}
    storageClassName: {{ .Values.persistence.storageClass }}
    {{- end }}
    {{- end }}
    accessModes:
      - {{ .Values.persistence.accessMode }}
    resources:
      requests:
        storage: {{ .Values.persistence.size }}
  {{- else }}
  storageType: Ephemeral
  {{- end }}
  serviceTemplate:
    metadata:
      annotations:
        passMe: ToService
    spec:
      type: {{ .Values.service.redis.type }}
      {{- if (or (eq .Values.service.redis.type "LoadBalancer") (eq .Values.service.redis.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.redis.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: redis
          port: 6380
          targetPort: redis
          {{- if (and (eq .Values.service.redis.type "NodePort") (not (empty .Values.service.redis.nodePorts.redis))) }}
          nodePort: {{ .Values.service.redis.nodePorts.redis }}
          {{- end }}
  replicaServiceTemplate:
    annotations:
      passMe: ToReplicaService
    spec:
      type: {{ .Values.service.redis.type }}
      {{- if (or (eq .Values.service.redis.type "LoadBalancer") (eq .Values.service.redis.type "NodePort")) }}
      externalTrafficPolicy: {{ .Values.service.redis.externalTrafficPolicy }}
      {{- end }}
      ports:
        - name: redis
          port: 6380
          targetPort: redis
          {{- if (and (eq .Values.service.redis.type "NodePort") (not (empty .Values.service.redis.nodePorts.redis))) }}
          nodePort: {{ .Values.service.redis.nodePorts.redis }}
          {{- end }}
  updateStrategy:
    type: RollingUpdate
  terminationPolicy: Delete
{{- end }}
