apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
  labels:
    app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.config.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
        release: {{ .Release.Name }}<% if (workload.volumes.length) { %>
      {{- if .Values.persistence.velero.enabled }}
      annotations:
        backup.velero.io/backup-volumes: data
      {{- end }}<% } %>
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: <%- workload.volumes.length ? '{{ .Values.persistence.enabled | ternary "91" "89" }}' : '89' %>
              preference:
                matchExpressions:
                  - key: application/state
                    operator: In
                    values:
                      - <%- workload.volumes.length ? '{{ .Values.persistence.enabled | ternary "stateful" "stateless" }}' : 'stateless' %>
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 90
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - {{ template "<%- _.kebabCase(name) %>.name" . }}-<%- _.kebabCase(workload.name) %>
      containers:
        - name: {{ template "<%- _.kebabCase(name) %>.fullname" . }}-<%- _.kebabCase(workload.name) %>
          image: {{ .Values.images.<%- _.camelCase(workload.name) %>.repository }}:{{ .Values.images.<%- _.camelCase(workload.name) %>.tag }}
          imagePullPolicy: {{ .Values.config.imagePullPolicy }}
{{- if .Values.config.<%- _.camelCase(workload.name) %>.resources.enabled }}
          resources:
{{ toYaml .Values.config.<%- _.camelCase(workload.name) %>.resources | indent 12 }}
{{- end }}
          ports:
            - name: container
              containerPort: <%- workload.port %><% if (workload.volumes.length) { %>
          volumeMounts:
            - name: data
              mountPath: /_data<% for (var i = 0; i < workload.volumes.length; i++) { var volume = workload.volumes[i]; %>
            - name: data
              mountPath: '<%- volume.mountPath %>'
              subPath: <%- volume.subPath %><% } if (volume.readOnly) { %>
              readOnly: true<% }} %>
          env: []<% if (workload.healthcheck !== 'none') { %>
          livenessProbe:
            <%- workload.healthcheck %>:<% if (workload.healthcheckPath) { %>
              path: <%- workload.healthcheckPath %><% } %>
              port: container
{{ toYaml .Values.probes.liveness | indent 12 }}
          readinessProbe:
            <%- workload.healthcheck %>:<% if (workload.healthcheckPath) { %>
              path: <%- workload.healthcheckPath %><% } %>
              port: container
{{ toYaml .Values.probes.readiness | indent 12 }}<% } %><%- include('./volumes'); %>
